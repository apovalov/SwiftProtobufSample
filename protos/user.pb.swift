/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: user.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct User: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "User"
  static let protoPackageName: String = ""
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "name"),
    4: .same(proto: "introduction"),
    5: .same(proto: "photoUrl"),
  ]

  var id: Int32 = 0

  var type: User.TypeEnum = User.TypeEnum.speaker

  var name: String = ""

  var introduction: String = ""

  var photoURL: String = ""

  enum TypeEnum: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int
    case speaker // = 0
    case participant // = 1
    case UNRECOGNIZED(Int)

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "Speaker"),
      1: .same(proto: "Participant"),
    ]

    init() {
      self = .speaker
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .speaker
      case 1: self = .participant
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .speaker: return 0
      case .participant: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularInt32Field(value: &id)
    case 2: try decoder.decodeSingularEnumField(value: &type)
    case 3: try decoder.decodeSingularStringField(value: &name)
    case 4: try decoder.decodeSingularStringField(value: &introduction)
    case 5: try decoder.decodeSingularStringField(value: &photoURL)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if id != 0 {
      try visitor.visitSingularInt32Field(value: id, fieldNumber: 1)
    }
    if type != User.TypeEnum.speaker {
      try visitor.visitSingularEnumField(value: type, fieldNumber: 2)
    }
    if !name.isEmpty {
      try visitor.visitSingularStringField(value: name, fieldNumber: 3)
    }
    if !introduction.isEmpty {
      try visitor.visitSingularStringField(value: introduction, fieldNumber: 4)
    }
    if !photoURL.isEmpty {
      try visitor.visitSingularStringField(value: photoURL, fieldNumber: 5)
    }
  }

  func _protobuf_generated_isEqualTo(other: User) -> Bool {
    if id != other.id {return false}
    if type != other.type {return false}
    if name != other.name {return false}
    if introduction != other.introduction {return false}
    if photoURL != other.photoURL {return false}
    return true
  }
}

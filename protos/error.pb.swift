/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: error.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct NetworkError: SwiftProtobuf.Message {
  static let protoMessageName: String = "NetworkError"

  /// Error code
  var code: NetworkError.Code = NetworkError.Code.unknown

  /// Optional: Message
  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Code: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown
    case unknown // = 0

    /// 400
    case badRequest // = 400

    /// 401
    case unauthorized // = 410

    /// 403
    case forbidden // = 430

    /// 404
    case notFound // = 440

    /// 500
    case internalServerError // = 500
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 400: self = .badRequest
      case 410: self = .unauthorized
      case 430: self = .forbidden
      case 440: self = .notFound
      case 500: self = .internalServerError
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .badRequest: return 400
      case .unauthorized: return 410
      case .forbidden: return 430
      case .notFound: return 440
      case .internalServerError: return 500
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.code)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != NetworkError.Code.unknown {
      try visitor.visitSingularEnumField(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension NetworkError: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  func _protobuf_generated_isEqualTo(other: NetworkError) -> Bool {
    if self.code != other.code {return false}
    if self.message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NetworkError.Code: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    400: .same(proto: "BAD_REQUEST"),
    410: .same(proto: "UNAUTHORIZED"),
    430: .same(proto: "FORBIDDEN"),
    440: .same(proto: "NOT_FOUND"),
    500: .same(proto: "INTERNAL_SERVER_ERROR"),
  ]
}

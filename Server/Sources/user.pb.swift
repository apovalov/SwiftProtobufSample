/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: user.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct User: SwiftProtobuf.Message {
  static let protoMessageName: String = "User"

  var id: Int32 = 0

  var type: User.TypeEnum = User.TypeEnum.speaker

  var name: String = String()

  var introduction: String = String()

  var photoURL: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case speaker // = 0
    case attendee // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .speaker
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .speaker
      case 1: self = .attendee
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .speaker: return 0
      case .attendee: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.name)
      case 4: try decoder.decodeSingularStringField(value: &self.introduction)
      case 5: try decoder.decodeSingularStringField(value: &self.photoURL)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.type != User.TypeEnum.speaker {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
    }
    if !self.introduction.isEmpty {
      try visitor.visitSingularStringField(value: self.introduction, fieldNumber: 4)
    }
    if !self.photoURL.isEmpty {
      try visitor.visitSingularStringField(value: self.photoURL, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension User: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "name"),
    4: .same(proto: "introduction"),
    5: .same(proto: "photoUrl"),
  ]

  func _protobuf_generated_isEqualTo(other: User) -> Bool {
    if self.id != other.id {return false}
    if self.type != other.type {return false}
    if self.name != other.name {return false}
    if self.introduction != other.introduction {return false}
    if self.photoURL != other.photoURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension User.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Speaker"),
    1: .same(proto: "Attendee"),
  ]
}

/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: error.proto
 *
 */

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _1: SwiftProtobuf.ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct NetworkError: SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NetworkError"
  static let protoPackageName: String = ""
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  ///   Error code
  var code: NetworkError.Code = NetworkError.Code.unknown

  ///   Optional: Message
  var message: String = ""

  enum Code: SwiftProtobuf.Enum, SwiftProtobuf._ProtoNameProviding {
    typealias RawValue = Int

    ///   Unknown
    case unknown // = 0

    ///   400
    case badRequest // = 400
    case UNRECOGNIZED(Int)

    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
      0: .same(proto: "UNKNOWN"),
      400: .same(proto: "BAD_REQUEST"),
    ]

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 400: self = .badRequest
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .badRequest: return 400
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  mutating func _protobuf_generated_decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      try decodeField(decoder: &decoder, fieldNumber: fieldNumber)
    }
  }

  mutating func _protobuf_generated_decodeField<D: SwiftProtobuf.Decoder>(decoder: inout D, fieldNumber: Int) throws {
    switch fieldNumber {
    case 1: try decoder.decodeSingularEnumField(value: &code)
    case 2: try decoder.decodeSingularStringField(value: &message)
    default: break
    }
  }

  func _protobuf_generated_traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if code != NetworkError.Code.unknown {
      try visitor.visitSingularEnumField(value: code, fieldNumber: 1)
    }
    if !message.isEmpty {
      try visitor.visitSingularStringField(value: message, fieldNumber: 2)
    }
  }

  func _protobuf_generated_isEqualTo(other: NetworkError) -> Bool {
    if code != other.code {return false}
    if message != other.message {return false}
    return true
  }
}
